<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TransactionProcessor</name>
    </assembly>
    <members>
        <member name="M:TransactionProcessor.Common.ClaimsHelper.GetUserClaim(System.Security.Claims.ClaimsPrincipal,System.String,System.String)">
            <summary>
            Gets the user claims.
            </summary>
            <param name="user">The user.</param>
            <param name="customClaimType">Type of the custom claim.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">No claim [{customClaimType}] found for user id [{userIdClaim.Value}</exception>
        </member>
        <member name="M:TransactionProcessor.Common.ClaimsHelper.IsPasswordToken(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Determines whether [is client token] [the specified user].
            </summary>
            <param name="user">The user.</param>
            <returns>
              <c>true</c> if [is client token] [the specified user]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TransactionProcessor.Common.ClaimsHelper.ValidateRouteParameter``1(``0,System.Security.Claims.Claim)">
            <summary>
            Validates the route parameter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="routeParameter">The route parameter.</param>
            <param name="userClaim">The user claim.</param>
        </member>
        <member name="M:TransactionProcessor.Common.ClaimsHelper.IsUserRolesValid(System.Security.Claims.ClaimsPrincipal,System.String[])">
            <summary>
            Determines whether [is user roles valid] [the specified user].
            </summary>
            <param name="user">The user.</param>
            <param name="allowedRoles">The allowed roles.</param>
            <returns>
              <c>true</c> if [is user roles valid] [the specified user]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:TransactionProcessor.Common.Examples.ExampleData">
            <summary>
            
            </summary>
        </member>
        <member name="F:TransactionProcessor.Common.Examples.ExampleData.ContractId">
            <summary>
            The contract identifier
            </summary>
        </member>
        <member name="F:TransactionProcessor.Common.Examples.ExampleData.CustomerEmailAddress">
            <summary>
            The customer email address
            </summary>
        </member>
        <member name="F:TransactionProcessor.Common.Examples.ExampleData.DeviceIdentifier">
            <summary>
            The device identifier
            </summary>
        </member>
        <member name="F:TransactionProcessor.Common.Examples.ExampleData.EstateId">
            <summary>
            The estate identifier
            </summary>
        </member>
        <member name="F:TransactionProcessor.Common.Examples.ExampleData.EstateIdMetadataName">
            <summary>
            The estate identifier metadata name
            </summary>
        </member>
        <member name="F:TransactionProcessor.Common.Examples.ExampleData.LogonResponseCode">
            <summary>
            The logon response code
            </summary>
        </member>
        <member name="F:TransactionProcessor.Common.Examples.ExampleData.LogonResponseMessage">
            <summary>
            The logon response message
            </summary>
        </member>
        <member name="F:TransactionProcessor.Common.Examples.ExampleData.MerchantId">
            <summary>
            The merchant identifier
            </summary>
        </member>
        <member name="F:TransactionProcessor.Common.Examples.ExampleData.MerchantIdMetadataName">
            <summary>
            The merchant identifier metadata name
            </summary>
        </member>
        <member name="F:TransactionProcessor.Common.Examples.ExampleData.OperatorIdentifier">
            <summary>
            The operator identifier
            </summary>
        </member>
        <member name="F:TransactionProcessor.Common.Examples.ExampleData.ProductId">
            <summary>
            The product identifier
            </summary>
        </member>
        <member name="F:TransactionProcessor.Common.Examples.ExampleData.ReconciliationResponseCode">
            <summary>
            The reconciliation response code
            </summary>
        </member>
        <member name="F:TransactionProcessor.Common.Examples.ExampleData.ReconciliationResponseMessage">
            <summary>
            The reconciliation response message
            </summary>
        </member>
        <member name="F:TransactionProcessor.Common.Examples.ExampleData.SaleResponseCode">
            <summary>
            The sale response code
            </summary>
        </member>
        <member name="F:TransactionProcessor.Common.Examples.ExampleData.SaleResponseMessage">
            <summary>
            The sale response message
            </summary>
        </member>
        <member name="F:TransactionProcessor.Common.Examples.ExampleData.TransactionCount">
            <summary>
            The transaction count
            </summary>
        </member>
        <member name="F:TransactionProcessor.Common.Examples.ExampleData.TransactionDateTime">
            <summary>
            The transaction date time
            </summary>
        </member>
        <member name="F:TransactionProcessor.Common.Examples.ExampleData.TransactionNumber">
            <summary>
            The transaction number
            </summary>
        </member>
        <member name="F:TransactionProcessor.Common.Examples.ExampleData.TransactionTypeLogon">
            <summary>
            The transaction type logon
            </summary>
        </member>
        <member name="F:TransactionProcessor.Common.Examples.ExampleData.TransactionTypeSale">
            <summary>
            The transaction type sale
            </summary>
        </member>
        <member name="F:TransactionProcessor.Common.Examples.ExampleData.TransactionValue">
            <summary>
            The transaction value
            </summary>
        </member>
        <member name="T:TransactionProcessor.Common.Examples.TransactionRequestExample">
             <summary>
            
             </summary>
             <seealso cref="!:Swashbuckle.AspNetCore.Filters.IMultipleExamplesProvider&lt;TransactionProcessor.DataTransferObjects.SerialisedMessage&gt;" />
        </member>
        <member name="M:TransactionProcessor.Common.Examples.TransactionRequestExample.GetExamples">
            <summary>
            Gets the examples.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TransactionProcessor.Common.Examples.TransactionRequestExample.GetLogonExample">
            <summary>
            Gets the logon example.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TransactionProcessor.Common.Examples.TransactionRequestExample.GetReconciliationExample">
            <summary>
            Gets the reconciliation example.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TransactionProcessor.Common.Examples.TransactionRequestExample.GetSaleExample">
            <summary>
            Gets the sale example.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TransactionProcessor.Common.Examples.TransactionResponseExample">
            <summary>
            
            </summary>
            <seealso cref="!:Swashbuckle.AspNetCore.Filters.IMultipleExamplesProvider&lt;TransactionProcessor.DataTransferObjects.SerialisedMessage&gt;" />
        </member>
        <member name="M:TransactionProcessor.Common.Examples.TransactionResponseExample.GetLogonExample">
            <summary>
            Gets the logon example.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TransactionProcessor.Common.Examples.TransactionResponseExample.GetReconciliationExample">
            <summary>
            Gets the reconciliation example.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TransactionProcessor.Common.Examples.TransactionResponseExample.GetSaleExample">
            <summary>
            Gets the sale example.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TransactionProcessor.Common.Examples.TransactionResponseExample.GetExamples">
            <summary>
            Gets the examples.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TransactionProcessor.Common.SwaggerDefaultValues">
            <summary>
            Represents the Swagger/Swashbuckle operation filter used to document the implicit API version parameter.
            </summary>
            <remarks>This <see cref="T:Swashbuckle.AspNetCore.SwaggerGen.IOperationFilter"/> is only required due to bugs in the <see cref="T:Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator"/>.
            Once they are fixed and published, this class can be removed.</remarks>
        </member>
        <member name="M:TransactionProcessor.Common.SwaggerDefaultValues.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            Applies the filter to the specified operation using the given context.
            </summary>
            <param name="operation">The operation to apply the filter to.</param>
            <param name="context">The current operation filter context.</param>
        </member>
        <member name="T:TransactionProcessor.Common.SwaggerJsonConverter">
            <summary>
            
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="P:TransactionProcessor.Common.SwaggerJsonConverter.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON.
            </summary>
            <value>
              <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:TransactionProcessor.Common.SwaggerJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TransactionProcessor.Common.SwaggerJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TransactionProcessor.Common.SwaggerJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="F:TransactionProcessor.Controllers.DomainEventController.DomainEventHandlerResolver">
            <summary>
            The domain event handler resolver
            </summary>
        </member>
        <member name="M:TransactionProcessor.Controllers.DomainEventController.#ctor(Shared.EventStore.EventHandling.IDomainEventHandlerResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:TransactionProcessor.Controllers.DomainEventController"/> class.
            </summary>
            <param name="domainEventHandlerResolver">The domain event handler resolver.</param>
        </member>
        <member name="M:TransactionProcessor.Controllers.DomainEventController.PostEventAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Posts the event asynchronous.
            </summary>
            <param name="domainEvent">The domain event.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:TransactionProcessor.Controllers.DomainEventController.Callback(System.Threading.CancellationToken,System.Guid)">
            <summary>
            Callbacks the specified cancellation token.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="eventId">The event identifier.</param>
        </member>
        <member name="M:TransactionProcessor.Controllers.DomainEventController.GetDomainEvent(System.Object)">
            <summary>
            Gets the domain event.
            </summary>
            <param name="domainEvent">The domain event.</param>
            <returns></returns>
        </member>
        <member name="F:TransactionProcessor.Controllers.DomainEventController.ControllerName">
            <summary>
            The controller name
            </summary>
        </member>
        <member name="F:TransactionProcessor.Controllers.DomainEventController.ControllerRoute">
            <summary>
            The controller route
            </summary>
        </member>
        <member name="T:TransactionProcessor.Controllers.TransactionController">
            <summary>
            
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
        </member>
        <member name="F:TransactionProcessor.Controllers.TransactionController.Mediator">
            <summary>
            The mediator
            </summary>
        </member>
        <member name="F:TransactionProcessor.Controllers.TransactionController.ModelFactory">
            <summary>
            The model factory
            </summary>
        </member>
        <member name="M:TransactionProcessor.Controllers.TransactionController.#ctor(MediatR.IMediator,TransactionProcessor.Factories.IModelFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TransactionProcessor.Controllers.TransactionController" /> class.
            </summary>
            <param name="mediator">The mediator.</param>
            <param name="modelFactory">The model factory.</param>
        </member>
        <member name="M:TransactionProcessor.Controllers.TransactionController.PerformTransaction(TransactionProcessor.DataTransferObjects.SerialisedMessage,System.Threading.CancellationToken)">
            <summary>
            Performs the transaction.
            </summary>
            <param name="transactionRequest">The transaction request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:TransactionProcessor.Controllers.TransactionController.ProcessSpecificMessage(TransactionProcessor.DataTransferObjects.LogonTransactionRequest,System.Threading.CancellationToken)">
            <summary>
            Processes the specific message.
            </summary>
            <param name="logonTransactionRequest">The logon transaction request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:TransactionProcessor.Controllers.TransactionController.ProcessSpecificMessage(TransactionProcessor.DataTransferObjects.SaleTransactionRequest,System.Threading.CancellationToken)">
            <summary>
            Processes the specific message.
            </summary>
            <param name="saleTransactionRequest">The sale transaction request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:TransactionProcessor.Controllers.TransactionController.ProcessSpecificMessage(TransactionProcessor.DataTransferObjects.ReconciliationRequest,System.Threading.CancellationToken)">
            <summary>
            Processes the specific message.
            </summary>
            <param name="reconciliationRequest">The reconciliation request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="F:TransactionProcessor.Controllers.TransactionController.ControllerName">
            <summary>
            The controller name
            </summary>
        </member>
        <member name="F:TransactionProcessor.Controllers.TransactionController.ControllerRoute">
            <summary>
            The controller route
            </summary>
        </member>
        <member name="T:TransactionProcessor.Factories.IModelFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:TransactionProcessor.Factories.IModelFactory.ConvertFrom(TransactionProcessor.Models.ProcessLogonTransactionResponse)">
            <summary>
            Converts from.
            </summary>
            <param name="processLogonTransactionResponse">The process logon transaction response.</param>
            <returns></returns>
        </member>
        <member name="M:TransactionProcessor.Factories.IModelFactory.ConvertFrom(TransactionProcessor.Models.ProcessSaleTransactionResponse)">
            <summary>
            Converts from.
            </summary>
            <param name="processSaleTransactionResponse">The process sale transaction response.</param>
            <returns></returns>
        </member>
        <member name="M:TransactionProcessor.Factories.IModelFactory.ConvertFrom(TransactionProcessor.Models.ProcessReconciliationTransactionResponse)">
            <summary>
            Converts from.
            </summary>
            <param name="processReconciliationTransactionResponse">The process reconciliation transaction response.</param>
            <returns></returns>
        </member>
        <member name="T:TransactionProcessor.Factories.ModelFactory">
            <summary>
            
            </summary>
            <seealso cref="T:TransactionProcessor.Factories.IModelFactory" />
        </member>
        <member name="M:TransactionProcessor.Factories.ModelFactory.ConvertFrom(TransactionProcessor.Models.ProcessLogonTransactionResponse)">
            <summary>
            Converts from.
            </summary>
            <param name="processLogonTransactionResponse">The process logon transaction response.</param>
            <returns></returns>
        </member>
        <member name="M:TransactionProcessor.Factories.ModelFactory.ConvertFrom(TransactionProcessor.Models.ProcessSaleTransactionResponse)">
            <summary>
            Converts from.
            </summary>
            <param name="processSaleTransactionResponse">The process sale transaction response.</param>
            <returns></returns>
        </member>
        <member name="M:TransactionProcessor.Factories.ModelFactory.ConvertFrom(TransactionProcessor.Models.ProcessReconciliationTransactionResponse)">
            <summary>
            Converts from.
            </summary>
            <param name="processReconciliationTransactionResponse">The process reconciliation transaction response.</param>
            <returns></returns>
        </member>
        <member name="M:TransactionProcessor.Program.Worker_TraceGenerated(System.String,Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Workers the trace generated.
            </summary>
            <param name="trace">The trace.</param>
            <param name="logLevel">The log level.</param>
        </member>
        <member name="T:TransactionProcessor.Startup">
            <summary>
            
            </summary>
        </member>
        <member name="M:TransactionProcessor.Startup.#ctor(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:TransactionProcessor.Startup"/> class.
            </summary>
            <param name="webHostEnvironment">The web host environment.</param>
        </member>
        <member name="P:TransactionProcessor.Startup.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="P:TransactionProcessor.Startup.WebHostEnvironment">
            <summary>
            Gets or sets the web host environment.
            </summary>
            <value>
            The web host environment.
            </value>
        </member>
        <member name="M:TransactionProcessor.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures the services.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="F:TransactionProcessor.Startup.EventStoreClientSettings">
            <summary>
            The event store client settings
            </summary>
        </member>
        <member name="M:TransactionProcessor.Startup.ConfigureEventStoreSettings(EventStore.Client.EventStoreClientSettings)">
            <summary>
            Configures the event store settings.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:TransactionProcessor.Startup.ConfigureMiddlewareServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures the middleware services.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="M:TransactionProcessor.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Configures the specified application.
            </summary>
            <param name="app">The application.</param>
            <param name="env">The env.</param>
            <param name="loggerFactory">The logger factory.</param>
            <param name="provider">The provider.</param>
        </member>
    </members>
</doc>
